
-------------------------------------------------------------
-- TurnButton declarations
-------------------------------------------------------------

-- UI work around declarations -- no post processing of UI data so have to use top level names
function tB_start(player, value, id)
    tB.start(player, value, id)
end

function tB_endTurn(player, value, id)
    tB.endTurn(player, value, id)
end

function tB_beginMoveButton(player, value, id)
    tB.beginMoveButton(player, value, id)
end

function tB_endMoveUI(player, value, id)
    tB.endMoveButton(player, value, id)
end

function tB_toggleGlobalPanel(player, value, id)
    tB.toggleGlobalPanel(player, value, id)
end

------------------------------------------------------------------------
-- required by turnButton, but might be duplicate

function deepCopy(original)
    if type(original) ~= "table" then
        return original
    else
        local copy = {}
        for i, v in pairs(original) do
            copy[i] = deepCopy(v)
        end
        return copy
    end
end -- of deepCopy

function doNothing() -- UI click function REQUIRED by turnButton
end -- of doNothing
-------------------------------------------------------
-- everything else lives inside tB
-------------------------------------------------------
tB = {
    UITable = {}, -- Global UI
    UIIndex = 1,
    UITrigger = false, -- make true to update Global UI with UITable
    triggerIndex = nil,
    curPlayer = "Black",
    curIndex = 0,
    order = {},
    button = nil, -- will default to the noises object; as good as anything to attach the turnButton to
    globalPanel = true,
    offset = { x = -220, y = 0 }, -- initial location of global panel relative to upper right screen corner
    noises = nil, -- assetBundle with some sounds if there is one called "Noises" -- we use index 1 and 3.

    -- top level UI for turnButton
    -- manage details of the on-screen turnButton here.
    tbLayout = {
        tag = "Panel",
        attributes = {
            id = "turnButton", width = "150", height = "25", color = "#444555", rectAlignment="UpperRight", offsetXY="-250 0",
            allowDragging="true", returnToOriginalPositionWhenReleased="false", onEndDrag="tB_endMoveButton"
        },
        children = {
            {   tag = "Button",
                attributes = { id="closeButton", width="20", height="20", rectAlignment="UpperRight", color="#990000",
                    textColor="#FFFFFF", text="X", onClick="tB_toggleGlobalPanel" },
            },
            {   tag = "Text",
                attributes = { text="Turn Button", alignment="UpperLeft", fontSize="18", offsetXY="5 0",
                    fontStyle="Bold", color="#FFFFFF" },
            },
            {   tag = "GridLayout",
                attributes = { id = "orderList", columns = "1", width = "100%", cellsize="150 25", rectAlignment="TopCenter", offsetXY = "0 -20"},
                children = {},
            },
        },
    },

    -- top level UI for button; need to change to classical UI -- new UI interferes with TTS operations (UI eats clicks)
    -- Edit this table to match your specific button; this is set up to work with the noise cube I am using.
    buttonTable = {
        width = 2500,
        height = 400,
        position = { 2, 0.5, 0 },
        color = {0.6, 0.4, 0.3 },
        hover_color = {0.5, 0.5,0.5 },
        press_color = {1, 1, 1 },
        label = "Start the Game",
        font_size = 380,
        font_color = {0, 0, 0},
        click_function = "tB_start",
        function_owner = Global
    },

    -- manage the look and feel of your player buttons here
    globalXmlTable = {
        tag = "Button",
        attributes = { id = "playerButton", width = "150", height = "25",
            text = "Start the Game", fontSize = "20", textColor = "Black",
            colors="#cccccc|#dddddd|#444444|#00000000", onClick = "tB_start",
        }
    },

    -------------------------------------------------------
    -- set up the buttons with "start the game".
    init = function ()
        tB.UITable = UI.getXmlTable()
        tB.UIIndex = #tB.UITable + 1
        for i, item in ipairs(tB.UITable) do
            if item.attributes.id == "turnButton" then
                tB.UIIndex = i
                break -- shouldn't ever be more than one.
            end
        end
        if tB.button == nil then
            tB.button = tB.noises
        end
        -- kick off maintenance function to update once a second
        tB.triggerIndex = Wait.time(tB.updateUI, 1, -1)
        tB.show({color = "Black", text = "Start the game"})
    end, -- of initTurns

    updateUI = function()
        if tB then
            if tB.UITrigger then
                UI.setXmlTable(tB.UITable)
                tB.UITrigger = false
            end
        end
    end,
    -------------------------------------------------------
    -- configure turnButton, then call initGame
    -- currently initialize3s order to getSeatedPlayers()
    start = function (p1, p2, p3) -- either obj, color, clicktype or player, value, id and value is nil in this app
        local player = p1 -- screen UI click
        if p3 ~= "playerButton" then -- button classic UI click
            player = Player[p2]
        end
        broadcastToAll("Game started by " .. player.color, player.color)
        local players = nil
        if Notes.getNotes() ~= "" then -- if notess is a JSON list...
            players = JSON.decode(Notes.getNotes())
        end
        if players == nil then -- notes not a list or empty
            players = getSeatedPlayers()
        end
        tB.order = table.sort(players,
            function(a, b)
                return Player[a].getHandTransform().rotation.y < Player[b].getHandTransform().rotation.y
            end
        )
        tB.tbLayout.attributes.height = tostring(25 * #tB.order + 25)
        tB.curIndex = math.random(#tB.order)
        tB.curPlayer = tB.order[tB.curIndex]
        tB.globalXmlTable.attributes.onClick = "tB_endTurn"
        broadcastToAll("Game started by " .. player.color, player.color)
        broadcastToAll(tB.curPlayer .. ", you are first.", tB.curPlayer)
        tB.show({color = tB.curPlayer, text = "End " .. tB.curPlayer .. "'s turn"})
        tB.playNoise(1)
        if initGame then initGame(player) end
    end, -- end of startTurns

    ----------------------------------------------------------------
    -- display turnButtons
    -- parameters are:
    --  color = current player color in order, or "Black"
    --  text = string to display in current player's button
    --
    --
    show = function (params) -- display turnButtons
        -- print("tB.show called", " ", params.color, " ", params.text )
        tB.buttonTable.font_color = params.color
        tB.buttonTable.label = params.text
        tB.buttonTable.click_function = "tB_endTurn"
        if params.color == "Black" then
            tB.buttonTable.click_function = "tB_start"
            tB.globalXmlTable.attributes.onClick = "tB_start"
            tB.globalXmlTable.attributes.textColor = "Black"
            tB.globalXmlTable.attributes.text = params.text
            tB.tbLayout.children[3].children = tB.globalXmlTable
        else
            tB.tbLayout.children[3].children = {}
            for _, player in ipairs(tB.order) do
                tB.globalXmlTable.attributes.textColor = player
                if player == params.color then
                    tB.globalXmlTable.attributes.onClick = "tB_endTurn"
                    tB.globalXmlTable.attributes.text = params.text
                else
                    tB.globalXmlTable.attributes.onClick = "doNothing"
                    tB.globalXmlTable.attributes.text = player
                end
                table.insert(tB.tbLayout.children[3].children, deepCopy(tB.globalXmlTable))
            end
        end

        if tB.globalPanel then
            -- log(string.format("offset: %8.2f %8.2f", tB.offset.x, tB.offset.y))
            -- log(tB.UIIndex)
            tB.UITable[tB.UIIndex] = deepCopy(tB.tbLayout)
        end
        tB.UITrigger = true
        if tB.button then
            local button = getObjectFromGUID(tB.button)
            button.clearButtons()
            button.createButton(tB.buttonTable)
        end

    end, -- of show

    -- Return entry in order just after current player
    next = function()
        local ix = tB.curIndex + 1
        if ix > #tB.order then
            ix = 1
        end
        return tB.order[ix]
    end,

    -- Return entry in order just before current player
    prev = function()
        local ix = tB.curIndex - 1
        if ix < 1 then
            ix = #tB.order
        end
        return tB.order[ix]
    end, -- of prev

    -- force end of current player's turn bypassing rule that only current player may end hes or her turn.
    pass = function()
        tB.endTurn(nil)
    end, -- of passTurn

    -- Make it newPlayer's turn -- newPlayer is a color
    set = function(newPlayer)
        local p = tB.curPlayer
        tB.curPlayer = newPlayer
        for i, color in ipairs(tB.order) do
            if color == tB.curPlayer then
                broadcastToAll(tB.curPlayer .. ", it is your turn.", tB.curPlayer)
                tB.curIndex = i
                tB.show({color = tB.curPlayer, text = "End " .. tB.curPlayer .. "'s turn"})
                return
            end
        end
        print(tB.curPlayer, " is not in the player list (order)")
        tB.curPlayer = p
    end, -- of setTurn

    -- player clicked end turn
    endTurn = function(p1, p2, p3)
        --  log(p1) log(p2) log(p3)
        local color = p2
        if p3 == "playerButton" then -- from global UI
            color = color.color
        end
        if color and color ~= tB.curPlayer then
            broadcastToAll(( color or "nil") .. ", You cannot end another player's turn (" .. (tB.curPlayer or "nil") .. ")", {0.8, 0, 0})
            return
        end
        if onTurnEnd then onTurnEnd() end -- call user turn end function
        tB.curIndex = tB.curIndex + 1
        if tB.curIndex > #tB.order then
            tB.curIndex = 1
        end
        tB.curPlayer = tB.order[tB.curIndex]
        tB.show({color = tB.curPlayer, text = "End " .. tB.curPlayer .. "'s turn"})
        if onTurnStart then onTurnStart() end -- call user turn start function
    end, -- of endTurn

    -- Show or hide the global UI
    toggleGlobalPanel = function (player, value, id)
        if value == "-2" then
            onLoad()
        else
            tB.globalPanel = not tB.globalPanel
            if tB.globalPanel then
                Global.UI.show("turnButton")
            else
                Global.UI.hide("turnButton")
            end
        end
        return tB.globalPanel
    end, -- of toggleGlobalPanel

    -----------------------------------------------------------------------
    -- implements onSave and onLoad support
    save = function()
        local tBData = {
            order = tB.order,
            curIndex = tB.curIndex,
            curPlayer = tB.curPlayer,
            button = tB.button,
            globalPanel = tB.globalPanel,
            UITable = tB.UITable,
            UIIndex = tB.UIIndex,
            offset = tB.offset,
            noises = tB.noises,
        }
        return tBData
    end, -- of save

    restore = function(tBData)
        if tBData then
            for k, v in pairs(tBData) do
                tB[k] = v
            end
        end
        if tB.triggerIndex then
            Wait.stop(tB.triggerIndex)
        end
        tB.triggerIndex = Wait.time(tB.updateUI, 1, -1)
    end,

    -------------------------------------------------------
    -- Utility functions
    -------------------------------------------------------
    playNoise = function(index) -- play a sound if we can.
        if tB.noises then
            local obj=getObjectFromGUID(tB.noises)
            obj.AssetBundle.playTriggerEffect(index)
        end
    end, -- of playNoise


    -------------------------------------------------------
    -- These functions are experimental and tempramental.
    -- To position your turnButton dynamically, you need to...
    -- 1.  use topDown camera
    -- 2.  set view directly over center of table
    -- 3. zoom untill table just fills screen vertically
    -- 4. adjust x and y calculations.  Only constants should be changed.
    -- 5 TEST and repeat :-)
    -------------------------------------------------------

    -------------------------------------------------------
    -- complete drag response
endMoveUI = function (player, value, id)
        local newPos = player.getPointerPosition() -- assumes topDown view on 26x15 viewport
        log(string.format("endDrag: %8.2f %8.2f", newPos.x, newPos.z))
        local x = math.max(math.min((newPos.x - 26) * 35, 0), -1760)
        local y = math.max(math.min((newPos.z - 16) * 35, 0), -1024)
        log(string.format("%6.2f %6.2f -> %6.2f %6.2f", tB.offset.x, tB.offset.y, x, y))
        tB.offset = {x = x, y = y}
        tB.tbLayout.attributes.offsetXY = string.format('%d %d', tB.offset.x, tB.offset.y)
    end, -- of endMoveTurnButton
}
--------------------------------------------------------------------------------
-- END of turnButton code
--------------------------------------------------------------------------------
--]]
